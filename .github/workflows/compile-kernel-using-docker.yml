#==========================================================================
# Description: Compile the kernel using docker
# Copyright (C) 2021 https://github.com/unifreq/openwrt_packit
# Copyright (C) 2021 https://github.com/ophub/amlogic-s9xxx-armbian
#==========================================================================

name: Compile the kernel using docker

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      kernel_source:
        description: "Select the kernel source"
        required: false
        default: "unifreq"
        type: choice
        options:
          - unifreq
          - codesnas
      kernel_version:
        description: "Select kernel version"
        required: false
        default: "6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
          - 5.4.y_5.10.y
          - 5.15.y_6.1.y
          - 6.6.y_6.12.y
          - 5.4.y_5.10.y_5.15.y
          - 6.1.y_6.6.y_6.12.y
          - all
      kernel_auto:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean
      silent_log:
        description: "Use silent logging"
        required: false
        default: true
        type: boolean
      delete_source:
        description: "Delete the source after compilation"
        required: false
        default: true
        type: boolean
      kernel_package:
        description: "Select compile package list"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - dtbs
      kernel_toolchain:
        description: "Select the compilation toolchain"
        required: false
        default: "clang"
        type: choice
        options:
          - clang
          - gcc
          - gcc-14.2
          - gcc-14.3
      compress_format:
        description: "Set the initrd compression format"
        required: false
        default: "xz"
        type: choice
        options:
          - xz
          - gzip
          - zstd
          - lzma
      docker_image:
        description: "Select Armbian docker image"
        required: false
        default: "trixie"
        type: choice
        options:
          - trixie
          - bookworm
          - bullseye
          - noble
          - jammy
      kernel_sign:
        description: "Set the kernel custom signature"
        required: false
        default: "-ophub"
        type: choice
        options:
          - -ophub
          - -yourname

env:
  TZ: Etc/UTC

jobs:
  build:
    runs-on: ubuntu-24.04-arm
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi -f $(docker images -q) 2>/dev/null || true
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://ophub.org/ubuntu2404-build-armbian-depends)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo -E timedatectl set-timezone "${TZ:-Etc/UTC}"
          sudo -E ntpdate ntp.ubuntu.com 0.pool.ntp.org || true
          sudo -E timedatectl set-ntp true
          date -u
          timedatectl status || true
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.btrfs -f /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner:runner /builder
          # Prepare cached directory
          sudo cp -af /home/runner/actions-runner/cached /builder/cached
          rm -rf /home/runner/actions-runner/cached
          sudo ln -sf /builder/cached /home/runner/actions-runner/cached
          echo "Verifying the symbolic link..."
          ls -ld /home/runner/actions-runner/cached
          df -Th /home/runner/actions-runner/cached
          echo "Server disk layout:"
          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Install Docker
        id: install
        working-directory: /builder
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        run: |
          df -hT ${PWD}
          curl -fsSL https://get.docker.com | sh
          sudo usermod -aG docker $USER
          sudo newgrp docker
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Pull Docker Image [ ${{ inputs.docker_image }} ]
        id: pull
        working-directory: /builder
        if: ${{ steps.install.outputs.status }} == 'success' && !cancelled()
        run: |
          # Create a docker mapping directory
          mkdir -p /builder/compile-kernel/{kernel,output}
          ln -sf /builder/compile-kernel/kernel /home/runner/work/_actions/ophub/amlogic-s9xxx-armbian/main/compile-kernel/kernel
          ln -sf /builder/compile-kernel/output /home/runner/work/_actions/ophub/amlogic-s9xxx-armbian/main/compile-kernel/output

          # Pull the Armbian Docker image
          docker run -d --privileged \
              --name armbian-ophub \
              -v /builder/compile-kernel:/opt/kernel/compile-kernel \
              -v /etc/localtime:/etc/localtime:ro \
              -v /etc/timezone:/etc/timezone:ro \
              --restart=always \
              ophub/armbian-${{ inputs.docker_image }}:latest

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile the kernel [ ${{ inputs.kernel_version }} ]
        uses: ophub/amlogic-s9xxx-armbian@main
        if: ${{ steps.pull.outputs.status }} == 'success' && !cancelled()
        with:
          build_target: kernel
          kernel_source: ${{ inputs.kernel_source }}
          kernel_version: ${{ inputs.kernel_version }}
          kernel_auto: ${{ inputs.kernel_auto }}
          delete_source: ${{ inputs.delete_source }}
          kernel_package: ${{ inputs.kernel_package }}
          kernel_sign: ${{ inputs.kernel_sign }}
          kernel_toolchain: ${{ inputs.kernel_toolchain }}
          compress_format: ${{ inputs.compress_format }}
          silent_log: ${{ inputs.silent_log }}

      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: ${{ env.PACKAGED_STATUS }} == 'success' && !cancelled()
        with:
          tag: kernel_stable
          artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            The kernel can be used to compile Armbian and OpenWrt.
            The kernel source code comes from: ${{ inputs.kernel_source }}
            The kernel compilation toolchain: ${{ inputs.kernel_toolchain }}
