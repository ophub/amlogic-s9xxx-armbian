#!/bin/bash
#==============================================================================================
#
# This file is licensed under the terms of the GNU General Public
# License version 2. This program is licensed "as is" without any
# warranty of any kind, whether express or implied.
#
# This file is a part of the Rebuild Armbian
# https://github.com/ophub/amlogic-s9xxx-armbian
#
# Description: Run on Armbian, Compile the kernel.
# Copyright (C) 2021- https://github.com/unifreq
# Copyright (C) 2021- https://github.com/ophub/amlogic-s9xxx-armbian
#
# Command: armbian-kernel
# Command optional parameters please refer to the source code repository
#
#======================================= Functions list =======================================
#
# error_msg       : Output error message
# update_script   : Update compile scripts
# clean_tmp       : Clear temporary files
# help_info       : Display help information
#
#=============================== Set make environment variables ===============================
#
# Related file storage path
make_path="/opt/kernel"
compile_path="${make_path}/compile-kernel"
kernel_path="${compile_path}/kernel"
out_kernel="${compile_path}/output"
config_path="${compile_path}/tools/config"
script_path="${compile_path}/tools/script"
compile_script="${make_path}/recompile"
script_name="${script_path}/armbian_compile_kernel_script.sh"
arch_info="$(arch)"

# The compile kernel scripts download repository
script_repo="https://github.com/ophub/amlogic-s9xxx-armbian.git"
script_dir="compile-kernel"

# Set font color
STEPS="[\033[95m STEPS \033[0m]"
INFO="[\033[94m INFO \033[0m]"
SUCCESS="[\033[92m SUCCESS \033[0m]"
HINT="[\033[93m HINT \033[0m]"
ERROR="[\033[91m ERROR \033[0m]"
#
#==============================================================================================

error_msg() {
    echo -e "${ERROR} ${1}"
    exit 1
}

update_script() {
    echo -e "${STEPS} Start updating the compile kernel scripts..."

    # Install git
    echo -e "${INFO} Start installing update dependencies..."
    [[ -z "$(dpkg -l | awk '{print $2}' | grep -w "^git$")" ]] && sudo apt-get update && sudo apt-get install -y git

    # Get the latest scripts
    echo -e "${INFO} Start syncing latest scripts..."
    git_tmp_path="$(mktemp -d)"
    cd ${git_tmp_path}
    git init --quiet
    git remote add origin ${script_repo}
    git config core.sparseCheckout true
    echo "${script_dir}/*" >>.git/info/sparse-checkout
    git pull --quiet --depth=1 origin main
    [[ "${?}" -ne "0" ]] && error_msg "Download [ ${script_repo} ] scripts failed."

    # Update related files
    cd ${make_path}
    mkdir -p ${compile_path}
    cp -af --no-preserve=ownership ${git_tmp_path}/${script_dir}/* ${compile_path}
    [[ "${?}" -ne "0" ]] && error_msg "Sync [ ${script_repo} ] scripts failed."
    cp -f --no-preserve=ownership ${script_name} ${compile_script}
    chmod +x ${compile_script}

    # Clean up temporary files
    rm -rf ${git_tmp_path} 2>/dev/null

    # Install dependencies
    echo -e "${INFO} Start installing compilation dependencies..."
    bash ${script_path}/armbian_compile_kernel_install_depends.sh
    [[ "${?}" -ne "0" ]] && error_msg "Dependency installation failed."

    sync && sleep 3
    echo -e "${SUCCESS} Scripts updated successfully."
    exit 0
}

clean_tmp() {
    cd ${make_path}
    echo -e "${STEPS} Start cleaning up scripts and spaces..."

    rm -rf ${kernel_path} ${out_kernel} 2>/dev/null && sync

    echo -e "${SUCCESS} Cleanup succeeded."
    exit 0
}

help_info() {
    clear
    cat <<EOF
==============================================================================================================================

01. Detailed instructions for compiling the kernel, list of optional parameters:
    Command: armbian-kernel -k 5.10.100 -p dtbs -t gcc
    -k : Kernel       Set the kernel name, such as [ -k 5.10.100 ]
    -p : PackageList  Set the package list for compiling the kernel, such as [ -p dtbs ], Optional: [ dtbs/all ]
    -t : Toolchain    Set the compilation toolchain, such as [ -t gcc ], Optional: [ gcc/clang ]
    -n : CustomName   Set the kernel custom signature, such as [ -n -ophub ]
    -a : AutoKernel   Set whether to automatically compile the latest version, such as [ -a true ], Optional: [ true/false ]
    -r : Repository   Set the kernel source code repository, such as [ -r owner/repo@branch ]

02. Script assist functions:
    Command: armbian-kernel -u
    -u : Update       Update the local compile script to the latest version.
    -c : Clear        Clear the local kernel source and generated files.

==============================================================================================================================
EOF
    exit 0
}

# Check script permission, supports running on Armbian system.
[[ "$(id -u)" == "0" ]] || error_msg "Please run this script as root: [ sudo $0 ]"
[[ "${arch_info}" == "aarch64" ]] || error_msg "The script only supports running under Armbian system."
# 10Gb free space required
[[ -d "${make_path}" ]] || mkdir -p ${make_path}
remaining_space="$(df -Tk ${make_path} | grep '/dev/' | awk '{print $5}' | echo $(($(xargs) / 1024 / 1024)))"
[[ "${remaining_space}" -ge "5" ]] || error_msg "The minimum space required to compile the kernel is 5GiB."

# Execute script assist functions
case "${1}" in
-u | --update) update_script ;;
-c | --clean) clean_tmp ;;
-h | --help) help_info ;;
*)
    [[ -f "${compile_script}" ]] || error_msg "Please run [ armbian-kernel -u ] to update scripts."
    cd ${make_path} && sudo ${compile_script} "${@}"
    ;;
esac
